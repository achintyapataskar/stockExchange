Test Descriptions
-----------------

Test Number: 1
---------------

Achintya Pataskar

File involved:

1.in -> Is a file containing a list of orders to be executed in the matching engine. The first line of this file contains the number of orders. Each of the next lines contains one order each. This file contains randomly generated data.

The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.

1.log -> This file stores all trades received by the matching engine. The purpose of the log file is to have a record to recover from if the matching engine fails.

1.match -> This file is intended to be the main output file for this test case. This file contains the trades executed by the engine. Each line corresponds to a trade that was successfully executed. 
The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use the 1.in file as input to your matching engine, and generate a file for trades executed in the formats as specified above. Use diff command to check if 1.match and your list of executed trades is same or not. If they are same the test case is PASS.

Test Number: 2
---------------

Achintya Pataskar

File involved:

2.log -> This is the file generated with all orders and is to be used as input for the matching engine.

2.log.check -> The log file rewritten from 2.log, and checked against 2.log for no difference.

The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.


The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use the file 2.log as input for your matching engine. Generate file 2.log.check and check for difference against 2.log. If there is no differnce test is PASS.


Test Number: 4
---------------

Achintya Pataskar

File involved:

4.in -> This file contains some bad orders of the SELL category. This is input to matching engine.

4.log -> This is the file which has all the orders along with warning for INVALID ORDERS.


The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.


The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use 4.in as input to your matching engine. If the 4.log file has INVALID erro warning after each sell order, then the test is PASS.


Test Number: 5
---------------

Achintya Pataskar

File involved:

5.in -> This file contains some bad orders of the BUY category. This is input to matching engine.

5.log -> This is the file which has all the orders along with warning for INVALID ORDERS.


The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.


The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use 5.in as input to your matching engine. If the 5.log file has INVALID erro warning after each buy order, then the test is PASS.


Test Number: 6
---------------

Achintya Pataskar

File involved:

6.in -> This file contains some bad orders of the REPLACE_BUY category. This is input to matching engine.

6.log -> This is the file which has all the orders along with warning for INVALID ORDERS.


The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.


The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use 6.in as input to your matching engine. If the 6.log file has INVALID erro warning after each REPLACE_BUY order, then the test is PASS.


Test Number: 7
---------------

Achintya Pataskar

File involved:

7.in -> This file contains some bad orders of the REPLACE_SELL category. This is input to matching engine.

7.log -> This is the file which has all the orders along with warning for INVALID ORDERS.


The format of each of the orders is as follows:

timestamp	order_id	ticker	order_type	price	quantity	status	broker_id	matched_order_id

Except for ticker, everything is integer. Ticker is of type char, and takes values between 'a' and 'z'.


The format of a trade is as follows:

timestamp	trade_id	quantity	buy_order_id	sell_order_id	ticker	price

Running the test: Use 7.in as input to your matching engine. If the 7.log file has INVALID erro warning after each REPLACE_SELL order, then the test is PASS.


